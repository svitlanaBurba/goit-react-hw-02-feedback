{"version":3,"sources":["components/feedbackOptions/ButtonContainerStyled.js","components/feedbackOptions/FeedbackOptions.js","components/notification/Notification.js","components/section/Section.js","components/statistics/StatisticsStyled.js","components/statistics/Statistics.js","App.js","index.js"],"names":["ButtonContainer","styled","button","FeedbackOptions","this","props","options","map","option","type","data-option","onClick","onLeaveFeedback","Component","Notification","message","Section","children","title","className","StatisticsItem","p","Statistics","feedback","total","positivePercentage","App","state","good","neutral","bad","Object","keys","bind","event","target","dataset","setState","prevState","getTotal","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAEaA,EAAkBC,IAAOC,OAAV,8W,OCyBbC,E,4JAtBb,WAAU,IAAD,OACP,OACE,mCACGC,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GAAM,OAC5B,cAACR,EAAD,CAEES,KAAK,SACLC,cAAaF,EACbG,QAAS,EAAKN,MAAMO,gBAJtB,SAMGJ,GALIA,Y,GANaK,aCKfC,EANM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAAe,4BAAIA,KCWzBC,EAXC,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,MAAZ,OACd,oCACE,oBAAIC,UAAU,eAAd,SAA8BD,IAC7BD,MCJQG,EAAiBnB,IAAOoB,EAAV,2DCyBZC,E,4JAtBb,WAAU,IAAD,OAEP,OACE,qCACGlB,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GAAM,OAC5B,eAACY,EAAD,WACGZ,EADH,KACa,EAAKH,MAAMkB,SAASf,KADZA,MAIvB,wCAAWJ,KAAKC,MAAMmB,SACtB,oDAAuBpB,KAAKC,MAAMoB,mBAAlC,c,GAXiBZ,aCwDVa,E,kDArDb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,KAAM,EACNC,QAAS,EACTC,IAAK,GAGP,EAAKxB,QAAUyB,OAAOC,KAAK,EAAKL,OAEhC,EAAKf,gBAAkB,EAAKA,gBAAgBqB,KAArB,gBAXX,E,mDAcd,SAAgBC,GACd,IAAI1B,EAAS0B,EAAMC,OAAOC,QAAQ5B,OAClCJ,KAAKiC,UAAS,SAAAC,GAAS,sBAAO9B,EAAS8B,EAAU9B,GAAU,Q,sBAG7D,WACE,OAAOJ,KAAKuB,MAAMC,KAAOxB,KAAKuB,MAAME,QAAUzB,KAAKuB,MAAMG,M,oBAG3D,WACE,OACE,qCACE,cAAC,EAAD,CAASZ,MAAM,wBAAf,SACE,cAAC,EAAD,CACEZ,QAASF,KAAKE,QACdM,gBAAiBR,KAAKQ,oBAG1B,cAAC,EAAD,CAASM,MAAM,aAAf,SACGd,KAAKmC,WAAa,EACjB,cAAC,EAAD,CACEjC,QAASF,KAAKE,QACdiB,SAAUnB,KAAKuB,MACfH,MAAOpB,KAAKmC,WACZd,mBACsB,IAApBrB,KAAKmC,WACDC,KAAKC,MAAOrC,KAAKuB,MAAMC,KAAOxB,KAAKmC,WAAc,KACjD,IAIR,cAAC,EAAD,CAAcxB,QAAQ,+B,GA9ChBF,aCDlB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e75a812c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ButtonContainer = styled.button`\r\n  padding: 2px 10px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n  transition-duration: 0.4s;\r\n  :hover {\r\n    background-color: lightblue;\r\n    color: white;\r\n    border-color: lightblue;\r\n  }\r\n  :not(:last-child) {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import {React, Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {ButtonContainer} from './ButtonContainerStyled';\r\n\r\nclass FeedbackOptions extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.options.map(option => (\r\n          <ButtonContainer\r\n            key={option}\r\n            type=\"button\"\r\n            data-option={option}\r\n            onClick={this.props.onLeaveFeedback}\r\n          >\r\n            {option}\r\n          </ButtonContainer>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({message}) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({children, title}) => (\r\n  <section>\r\n    <h2 className=\"sectionTitle\">{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Section;\r\n","import styled from 'styled-components';\r\n\r\nexport const StatisticsItem = styled.p`\r\n  text-transform: capitalize;\r\n`;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {StatisticsItem} from './StatisticsStyled';\r\n\r\nclass Statistics extends Component {\r\n  render() {\r\n    // console.log(this.props);\r\n    return (\r\n      <>\r\n        {this.props.options.map(option => (\r\n          <StatisticsItem key={option}>\r\n            {option}: {this.props.feedback[option]}\r\n          </StatisticsItem>\r\n        ))}\r\n        <p>Total: {this.props.total}</p>\r\n        <p>Positive feedback: {this.props.positivePercentage}%</p>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nStatistics.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  feedback: PropTypes.object.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired\r\n};\r\nexport default Statistics;\r\n","import {React, Component} from 'react';\nimport FeedbackOptions from './components/feedbackOptions/FeedbackOptions';\nimport Notification from './components/notification/Notification';\nimport Section from './components/section/Section';\nimport Statistics from './components/statistics/Statistics';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.options = Object.keys(this.state);\n\n    this.onLeaveFeedback = this.onLeaveFeedback.bind(this);\n  }\n\n  onLeaveFeedback(event) {\n    let option = event.target.dataset.option;\n    this.setState(prevState => ({[option]: prevState[option] + 1}));\n  }\n\n  getTotal() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.getTotal() > 0 ? (\n            <Statistics\n              options={this.options}\n              feedback={this.state}\n              total={this.getTotal()}\n              positivePercentage={\n                this.getTotal() !== 0\n                  ? Math.round((this.state.good / this.getTotal()) * 100)\n                  : 0\n              }\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}